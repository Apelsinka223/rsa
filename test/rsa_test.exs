defmodule RSATest do
  use ExUnit.Case
  @test_public_key [65537, 25311497632201647042438929885596384539145749809465884372311000998592046022831834545911110262116112765547397151340605045545277779534446419192701018338967172465374092165310930769578013521725208073508994383131881595316657256444801708277769556649185071743105131888928604060152249676646954880133610001204673359470940713197420611296855908392847314883907967164646763108431110067641692136068710691397181048459919626600508432421651743165218665441275192220023013170005871439217385256982142686191429161764799866247976882840600858969215982335858192268495095099984406143618254482597089004347932043034764098246542969187027475461067]
  @test_private_key [65537, 25311497632201647042438929885596384539145749809465884372311000998592046022831834545911110262116112765547397151340605045545277779534446419192701018338967172465374092165310930769578013521725208073508994383131881595316657256444801708277769556649185071743105131888928604060152249676646954880133610001204673359470940713197420611296855908392847314883907967164646763108431110067641692136068710691397181048459919626600508432421651743165218665441275192220023013170005871439217385256982142686191429161764799866247976882840600858969215982335858192268495095099984406143618254482597089004347932043034764098246542969187027475461067, 22182368227192297448502066588022465874328030582826084027704691126449702661417922961752973402881409534907224245651275627369165956140209806465550498013314304141916184499056003612474071236405195930573402694587479125181381655002627311517672375698398532059222168394046330686403778936756608534728075597283830727698783887372862600428191115608571105025389563878721094761861924024117794706262273080607086855066640196562339209491885604040879915692133659185861944115512118876189702646656246496134359839505955987103644358471531322442239441895157563192126321853778642096995979838544768320790481467671686238728563376772566400720753]
  @test_data "test_data"

  test "generate_key return match {[a, b, c], [a, b]}" do
    assert match? {[e, n, d], [e, n]}, RSA.generate_key('test_password')
  end

  test "generate_key return list, contains numbers" do
    {[e, n, d], [e, n]} = RSA.generate_key('test_password')
    assert is_number(e)
    assert is_number(n)
    assert is_number(d)
  end

  test "encrypt_public return right encrypted data" do
    assert(
      :crypto.private_decrypt(
        :rsa,
        RSA.encrypt_public(@test_public_key, @test_data),
        @test_private_key,
        :rsa_pkcs1_padding
      ) == @test_data)
  end

  test "decrypt_private return right decrypted data" do
    assert(
      RSA.decrypt_private(
        @test_private_key,
        :crypto.public_encrypt(:rsa, @test_data, @test_public_key, :rsa_pkcs1_padding)
      ) == @test_data)
  end
end
